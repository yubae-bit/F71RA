---
title: "Class 2 Notebook"
format: html
editor: visual
toc: TRUE
---

## Class 2 (10/02/2023)

In this class, we will go through the `dplyr` package in R.

## Introduction to dplyr

### Pipe Operator

In computation, we often have to chain multiple operations together. Consider a toy example. We want to calculate:

$$
\arctan(\sin(\exp(\Gamma(x)))
$$

Try and write it as is in the following code chunk:

```{r}
atan(sin(exp(gamma(1))))
```

However, as you may notice, this is difficult to read and error-prone (imagine counting parentheses whenever you write codes!).

In mathematics, we chain operations by composition:

$$
\arctan \circ \sin \circ \exp \circ \Gamma(x)
$$

In R specifically, we have the pipe operator `%>%`, provided by the `magrittr` package. It allows you write the above as:

```{r}
library(magrittr)
x <- 1
x %>% gamma %>% exp %>% sin %>% atan
```

The pipe `%>%` takes the expression on its LHS, and pass it as the FIRST argument to the function on the RHS.

It's helpful to read `%>%` as "and then". We applied the gamma function, and then the exponential function, and then the sine function, so on and so forth . . .

You can also supply additional arguments for piped functions (that the pipe feed into). As an example:

```{r}
x <- c(1, 2, 3, NA)
x %>% max(na.rm=T) #is the same as
max(x,na.rm=T)
```

Amongst the readers familiar with **Object Oriented Programming**, compare this with method chaining techniques.\

As of the time of writing, R is considering implementing a native pipe operator.

### Tidyverse collection of packages

-   From the `tidyverse` website: The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.

-   `tidyverse` packages help to steamline the data cleansing and exploring process and also smooth out some quirks of R.

-   It is not a single package but a collection of packages. We will introduce them judiciously as we need them.

-   `dplyr` (pronounced d-plier) is a package designed for cleansing and manipulating a data set. It is an amalgamation of "data frames" and the package `plyr`. Pliers, of course, are handy tools to have.

-   We will look at the 5 main functions: `mutate, select, filter, group_by` and `arrange`. For full potential of the package, you are encouraged to look at its documentation.

-   Although not compulsory, you are encouraged to try recreating all examples in these notes in base R.

### Dplyr - mutate

-   The general syntax is: `mutate(dataset, output_column = f(input_columns))`

-   `output_column` will be added in as a new column in the dataset. If there is already a column named `output_column`, it will be overwritten.

-   `f` is a function returning a vector of the same length. The length preservation is important - since the output will be pushed into the data frame

-   As demonstration, we will consider the two built-in data sets in R: `mtcars` and `iris`. For demo purposes, there are no benefits gained from working on a large data sets. Worry not, you will be given a "proper" data set to work with.

Let's take a look at the `mtcars` as an example:

```{r}
head(mtcars)
```

-   The row names are not actually part of the data frame. It is stored as an additional attributes. The technical implication is that this information might be lost if fed to a function that doesn't preserve attributes. For instance:

```{r}
library(dplyr, warn.conflicts = FALSE)
as_tibble(mtcars)%>%head()
```

**Q: What does `warn.conflicts - FALSE` and `as_tibble` mean? Comment your description in the code above.**

-   We want to create a new column in the data frame that stores the column name. This is done simply by:

```{r}
mutate(mtcars, modelNames = rownames(mtcars)) %>% head(n=2)
```

Within a function call, `<-` and `=` are not equivalent. Strange behavior might result. Please copy the code above and see what happens :)

```{r}
#mutate(mtcars, modelNames <- rownames(mtcars)) %>% head(n=2)
```

-   mutate and other dplyr functions are designed to work seamlessly with the pipe operator - so let's do just that.

-   For another example, suppose that you suspect that `mpg` is a linear function of the square root of `disp`. Let us create a column for that:

```{r}
mtcars %>% mutate(root_disp = sqrt(disp))

x <- c(rep(1:32))

mtcars %>% mutate(x_row = x)
```

-   The input part can contain multiple columns, as in the following example. The calculations are nonsensical, but they demonstrate the technique at a mechanical level:

```{r}
mtcars %>% mutate(outputCol = mpg + cyl*disp)
```

### Dplyr - select

-   In insurance, you often have enormous data sets with tens or even hundreds of columns, many of which might be irrelevant.

-   You can use the select function to retain only the desired columns.

    ```{r}
    mtcars %>% select(cyl, disp, hp) %>% head(n = 2)
    ```

-   You can chain mutate and select by the pipe operator. It works because these functions take a data frame as input and return a data frame as output, which can then be fed into another data-frame-consuming function.

    ```{r}
    mtcars %>% mutate(outputCol = mpg + cyl*disp) %>% select(mpg,cyl,disp,outputCol)
    ```

-   In certain cases, you want to exclude columns from a data frame instead. Here's an example.

    ```{r}
    mtcars %>% select(!cyl) %>% head(n=3)
    ```

-   If you want to exclude multiple columns, this doesn't work `mtcars %>% select(!cyl, !am)`

-   Either of these work though:

    ```{r}
    mtcars %>% select(!cyl & !am)
    mtcars %>% select(!cyl) %>% select(!am)
    ```

-   It is difficult to explain why mtcars%\>%select(!cyl,!am) doesn't work without digging into the mechanics of tidyselect. We shall not do so.

-   These methods require one to explicitly name the columns. It is possible to select/deselect columns based on pattern matching or regular expression. See this for helper functions.

### Dplyr - filter

-   This allows you to select a subset of the original data set satisfying a certain condition.

-   As an example, let us select the rows of `mtcars` where `cyl` has the value 6.

    ```{r}
    mtcars %>% dplyr::filter(cyl == 6) %>% head()
    ```

-   You can also combine multiple conditions using Boolean algebra. For example:

    ```{r}
    mtcars %>% filter(cyl == 6 & mpg > 15) %>% head()
    ```

-   Since the "and" operator is used so often, `filter` has its own built-in syntax, where you can supply an arbitrary number of conditions:

    ```{r}
    mtcars %>% filter(cyl == 6, mpg > 15) %>% head()
    ```

-   The original code combines the conditions `cyl == 6` AND `mpg > 15` and filters based on this one condition. The second version filters twice, based on two conditions. The desired effect is the same in the end.

### Dplyr::group_by and dplyr::summarise

**Q: What does :: mean in R?**

-   An Extremely powerful techniques when data entires can be categorised into groups.

-   For our example, consider the `iris` dataset. Each row is an observation from a flower, which can be one of the three species: `vetosa`, `versicolor`, and `virginica`.

-   Suppose that we want to find the mean `Sepal.Length` of each group. This involves partitioning `iris` into three sub-datasets, and compute the mean `Sepal.Length` three times.

-   A solution with `dplyr` can look like this:

    ```{r}
    iris%>%group_by(Species)%>%summarise(meanLength = mean(Sepal.Length))
    ```

-   You can compute an arbitrary number of by-group summary statistics in one call to `summarise`, for instance:

    ```{r}
    iris%>%group_by(Species)%>%summarise(meanLength = mean(Sepal.Length),maxLength = max(Sepal.Length), minLength = min(Sepal.Length))
    ```

-   Note that `group_by` partiions by unique values of the grouping column. Although it makes sense to group by a categorical column, we can equally well group by numeric columns.

-   To demonstrate this, let's consider the `mtcars` dataset again. The `cyl` column is a numeric column showing the number of cylinders in a vehicle, but we can treat it as a categorical variable for vehicle type.

    ```{r}
    mtcars %>% group_by(cyl) %>% summarise(avgDisp = mean(disp))
    ```

-   If you want to categorise your data at a finer level than offered by one categorical variable, we can `group_by` multiple columns. As an example, given the number of `cyl`, we want to further distinguish between automatic `(am == 0)` and manual `(am==1)` vehicles.

```{r}
mtcars %>% group_by(cyl, am) %>% summarise(avgDisp = mean(disp))
```

Q: We get the following note \`\` \`summarise()\` has grouped output by 'cyl'. You can override using the \`.groups\` argument \`\`, please investigate what this means and comment in the code above.\*\*

### Dplyr::arrange

-   As the name suggests, this arranges the rows in a certain order. As an example, let's arrange mtcars in the increasing order of mpg:

    ```{r}
    mtcars %>% arrange(mpg) %>% head()
    ```

-   For descending order:

    ```{r}
    mtcars %>% arrange(desc(mpg)) %>% head()
    ```

-   You can also arrange by multiple columns, first by the number of `cyl`, then `mpg:`

    ```{r}
    mtcars %>% arrange(cyl, mpg) %>% head()
    ```

### Lexical Scoping & NSE (Optional)

-   This section is optional, but it will help you understand more thoroughly how R looks for its variables, i.e. its scoping rules.

-   Let's have a look at the following example. I have selected only the first two columns to make the output more succinct.

    ```{r}
    external = 1:32
    mtcars%>%select(mpg,cyl)%>%mutate(out1 = cyl^2,out2=external^2)
    ```

-   When mutate evaluates the computations supplied to it, it will: Treat the columns of the master data frame as if they were variables, then If such a column cannot be found (e.g. the external variable above), it will search outside of the data frame for a variable whose name matches.

-   This mechanism is called lexical scoping. We will not explore this further, but the interested students are suggested to consult \[Advanced R by Wickham\].

-   Unfortunately this opens up the following issue, if you have another `cyl` variable defined outside the data frame, e.g: `cyl <- 1:32`.

-   How to you target it in mutate? The easiest solution is to enforce some naming scheme to avoid this situation.

-   Let's take a look at a tangential, but related, example.There are several ways in which one can load a package:

    ```{r}
    library(dplyr)
    library("dplyr")
    ```

-   library can interpret both a string of characters and the codes. If supply codes, library will first convert this into a character strings.

-   In general, R can access the codes you type and convert them into strings. This behavior is called Non-Standard Evaluation (NSE).

-   The situation is a bit more complicated, for example:

    ```{r}
    dplyr <- "purrr"
    library(dplyr)
    ```

-   This seems rather ambiguous. What do you think R will do?

-   NSE is employed extensively in R, and thoroughly in `dplyr` and `tidyverse`.

-   Again, we will not explore this further. But if you're not getting the expected results, scoping issues and NSE often are the source of errors. It is worth bearing in mind these concepts

## Case Study: A Motor Third-party Liability Policies

As an example, we look at a data set containing risk features and claim numbers collected for nearly 700,000 MTPL policies observed over a year.

We conduct an initial numerical analysis to prepare for regression modelling. The response variable for the regression is the number of claims of each policy during the exposure period. Among all the policies, 94.98% have no claims. 9 variables are selected to explain the response, including:

1.  IDpol: policy ID.

2.  ClaimNb: Number of claims during the exposure period

3.  Exposure : The exposure period.

4.  Area: The area code.

5.  VehPower: The power of the car (oredered categorical).

6.  VehAge: The vehicle age, in years

7.  DrivAge: The driver age, in years

8.  BonusMalus: Bonus/malus, between 50 and 350: \<100 means bonus, \>100 means malus in France.

9.  VehBrand: The car brand (unordered categories).

10. VehGas: The car gas, Diesel or regular.

11. Density: The density of inhabitants (number of inhabitants per km2) in the city the driver of the car lives in.

12. Region: the policy regions in France (based on a standard French classification)

Visit this [link](https://www.openml.org/search?type=data&sort=runs&id=41214) and download the `.csv` spreadsheet. Install and load the package readr. Type `?readr::read_csv` to read its documentation. Use the following code to interactively load the data set. (Note: set session to current directory, save the data set in the same folder to run the code below)

```{r}
library(readr)
dat <- read_csv("freMTPL2freq.csv")
```

Use the function `str` to have a quick overview of the dataset:

```{r}
str(dat)
```

## Tasks

1.  `VehGas` is a character column. For regressions - it should be a factor column. A factor vector is made of underlying numeric data (for mathematical categorisation) and factor labels (to retain qualitative data). Use `mutate` to convert the `VehGas` column to a factor column. *Hint: Consult `?factor`*

    ```{r}

    ```

2.  Some entries have an excessively high `ClaimNb`. One possible reason is that they might be bulk policies. Similar issues are seen with `Exposure`. One crude way to address this is to bound the `ClaimNb` and `Exposure` columns from above by 4 and 1, respectively. *Hint: consult the documentation of the `pmin` and `pmax` functions in base R.*

    ```{r}

    ```

3.  By using `mutate`, create a new column storing the logarithm of the `Exposure` column.

    ```{r}

    ```

4.  Create a new column that maps `Area` to numerical data. For instance, map "A" to 1, "B" to 2, etc. *Hint: write a function for this, then use `mutate.`*

    ```{r}

    ```

## Additional Exercises Functions in R

1.  Write an R function, `choose.members(n,c,p)`, that returns the number of ways to choose members from an organization of $p$ people to serve on an executive committee consisting of $n$ "named positions" (e.g., president, vice-president, treasurer, and so on\...), and $c$ at-large members of equal rank, as the sample output below suggests. *Hint: Use the built-in functions: `factorial()` and `choose()`. First please use help and the name of each function, for example, `help(factorial)`.*

    ```{r}

    ```

2.  Write an R function, `number.sequence(n)`, that returns a vector that has the form $\{22\cdot3, 32 \cdot 5, 42 \cdot 7, 52 \cdot 9,...\}$ and has exactly $n$ terms, as the sample output below suggests.

```{r}

```

3.  Write a function `is.even(n)` in R that returns `TRUE` when $n$ is even and `FALSE` otherwise. Then, using `is.even(n)`, write a function `evens.in(v)` that returns a vector comprised of the even integers in a vector $v$ of integers.

    ```{r}

    ```

4.  The sequence of consecutive differences of a given sequence of numbers, $\{x_1, x_2, x_3, x_4,...\}$, is the sequence $\{(x_2 - x_1), (x_3 - x_2), (x_4 - x_3),...\}$. Write a function `consecutive.differences(v)` that computes the consecutive differences of the elements of some vector $v$.

    ```{r}

    ```

5.  Write a function `histogram.for.simulated.uniform.data(n,num.bars)` that will simulate $n$ values following a uniform distribution and then plot the corresponding histogram. The histogram should have `num.bars` bars (although depending on the random data produced, it is possible that some interior bars might be zero-high).

    ```{r}

    ```
